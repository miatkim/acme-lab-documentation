// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_latency_array_array_softmax_config6_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_TREADY,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_TDATA_blk_n,
        res_V_data_1_V_TDATA_blk_n,
        res_V_data_2_V_TDATA_blk_n,
        res_V_data_3_V_TDATA_blk_n,
        res_V_data_4_V_TDATA_blk_n,
        res_V_data_5_V_TDATA_blk_n,
        res_V_data_6_V_TDATA_blk_n,
        res_V_data_7_V_TDATA_blk_n,
        res_V_data_8_V_TDATA_blk_n,
        res_V_data_9_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [19:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [19:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [19:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [19:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [19:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [19:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [19:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [19:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [19:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [19:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input   res_V_data_0_V_TREADY;
output  [23:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
output  [23:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [23:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [23:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [23:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [23:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [23:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [23:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [23:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [23:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_TDATA_blk_n;
output   res_V_data_1_V_TDATA_blk_n;
output   res_V_data_2_V_TDATA_blk_n;
output   res_V_data_3_V_TDATA_blk_n;
output   res_V_data_4_V_TDATA_blk_n;
output   res_V_data_5_V_TDATA_blk_n;
output   res_V_data_6_V_TDATA_blk_n;
output   res_V_data_7_V_TDATA_blk_n;
output   res_V_data_8_V_TDATA_blk_n;
output   res_V_data_9_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_TVALID;
reg res_V_data_1_V_TVALID;
reg res_V_data_2_V_TVALID;
reg res_V_data_3_V_TVALID;
reg res_V_data_4_V_TVALID;
reg res_V_data_5_V_TVALID;
reg res_V_data_6_V_TVALID;
reg res_V_data_7_V_TVALID;
reg res_V_data_8_V_TVALID;
reg res_V_data_9_V_TVALID;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_TDATA_blk_n;
reg res_V_data_1_V_TDATA_blk_n;
reg res_V_data_2_V_TDATA_blk_n;
reg res_V_data_3_V_TDATA_blk_n;
reg res_V_data_4_V_TDATA_blk_n;
reg res_V_data_5_V_TDATA_blk_n;
reg res_V_data_6_V_TDATA_blk_n;
reg res_V_data_7_V_TDATA_blk_n;
reg res_V_data_8_V_TDATA_blk_n;
reg res_V_data_9_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op8;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [17:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [17:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [17:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [17:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [17:0] exp_table1_q4;
wire   [9:0] exp_table1_address5;
reg    exp_table1_ce5;
wire   [17:0] exp_table1_q5;
wire   [9:0] exp_table1_address6;
reg    exp_table1_ce6;
wire   [17:0] exp_table1_q6;
wire   [9:0] exp_table1_address7;
reg    exp_table1_ce7;
wire   [17:0] exp_table1_q7;
wire   [9:0] exp_table1_address8;
reg    exp_table1_ce8;
wire   [17:0] exp_table1_q8;
wire   [9:0] exp_table1_address9;
reg    exp_table1_ce9;
wire   [17:0] exp_table1_q9;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [13:0] invert_table2_q0;
reg   [9:0] y_V_reg_1229;
reg   [9:0] y_V_reg_1229_pp0_iter1_reg;
reg   [9:0] y_V_1_reg_1234;
reg   [9:0] y_V_1_reg_1234_pp0_iter1_reg;
reg   [9:0] y_V_2_reg_1239;
reg   [9:0] y_V_2_reg_1239_pp0_iter1_reg;
reg   [9:0] y_V_3_reg_1244;
reg   [9:0] y_V_3_reg_1244_pp0_iter1_reg;
reg   [9:0] y_V_4_reg_1249;
reg   [9:0] y_V_5_reg_1254;
reg   [9:0] y_V_5_reg_1254_pp0_iter1_reg;
reg   [9:0] y_V_6_reg_1259;
reg   [9:0] y_V_6_reg_1259_pp0_iter1_reg;
reg   [9:0] y_V_7_reg_1264;
reg   [9:0] y_V_7_reg_1264_pp0_iter1_reg;
reg   [9:0] y_V_8_reg_1269;
reg   [9:0] y_V_9_reg_1274;
reg  signed [17:0] exp_res_4_V_reg_1314;
reg  signed [17:0] exp_res_4_V_reg_1314_pp0_iter3_reg;
reg  signed [17:0] exp_res_4_V_reg_1314_pp0_iter4_reg;
reg  signed [17:0] exp_res_4_V_reg_1314_pp0_iter5_reg;
reg  signed [17:0] exp_res_8_V_reg_1335;
reg  signed [17:0] exp_res_8_V_reg_1335_pp0_iter3_reg;
reg  signed [17:0] exp_res_8_V_reg_1335_pp0_iter4_reg;
reg  signed [17:0] exp_res_8_V_reg_1335_pp0_iter5_reg;
reg  signed [17:0] exp_res_9_V_reg_1341;
reg  signed [17:0] exp_res_9_V_reg_1341_pp0_iter3_reg;
reg  signed [17:0] exp_res_9_V_reg_1341_pp0_iter4_reg;
reg  signed [17:0] exp_res_9_V_reg_1341_pp0_iter5_reg;
reg  signed [17:0] exp_res_0_V_reg_1347;
reg  signed [17:0] exp_res_0_V_reg_1347_pp0_iter4_reg;
reg  signed [17:0] exp_res_0_V_reg_1347_pp0_iter5_reg;
reg  signed [17:0] exp_res_1_V_reg_1352;
reg  signed [17:0] exp_res_1_V_reg_1352_pp0_iter4_reg;
reg  signed [17:0] exp_res_1_V_reg_1352_pp0_iter5_reg;
reg  signed [17:0] exp_res_2_V_reg_1357;
reg  signed [17:0] exp_res_2_V_reg_1357_pp0_iter4_reg;
reg  signed [17:0] exp_res_2_V_reg_1357_pp0_iter5_reg;
reg  signed [17:0] exp_res_3_V_reg_1362;
reg  signed [17:0] exp_res_3_V_reg_1362_pp0_iter4_reg;
reg  signed [17:0] exp_res_3_V_reg_1362_pp0_iter5_reg;
reg  signed [17:0] exp_res_5_V_reg_1367;
reg  signed [17:0] exp_res_5_V_reg_1367_pp0_iter4_reg;
reg  signed [17:0] exp_res_5_V_reg_1367_pp0_iter5_reg;
reg  signed [17:0] exp_res_6_V_reg_1372;
reg  signed [17:0] exp_res_6_V_reg_1372_pp0_iter4_reg;
reg  signed [17:0] exp_res_6_V_reg_1372_pp0_iter5_reg;
reg  signed [17:0] exp_res_7_V_reg_1377;
reg  signed [17:0] exp_res_7_V_reg_1377_pp0_iter4_reg;
reg  signed [17:0] exp_res_7_V_reg_1377_pp0_iter5_reg;
wire   [17:0] add_ln703_fu_963_p2;
reg   [17:0] add_ln703_reg_1382;
wire   [17:0] add_ln703_2_fu_975_p2;
reg   [17:0] add_ln703_2_reg_1387;
wire   [17:0] add_ln703_7_fu_996_p2;
reg   [17:0] add_ln703_7_reg_1392;
reg   [13:0] inv_exp_sum_V_reg_1402;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln156_4_fu_923_p1;
wire   [63:0] zext_ln156_8_fu_927_p1;
wire   [63:0] zext_ln156_9_fu_931_p1;
wire   [63:0] zext_ln156_fu_935_p1;
wire   [63:0] zext_ln156_1_fu_939_p1;
wire   [63:0] zext_ln156_2_fu_943_p1;
wire   [63:0] zext_ln156_3_fu_947_p1;
wire   [63:0] zext_ln156_5_fu_951_p1;
wire   [63:0] zext_ln156_6_fu_955_p1;
wire   [63:0] zext_ln156_7_fu_959_p1;
wire   [63:0] zext_ln164_fu_1021_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [17:0] mul_ln1118_fu_412_p0;
wire  signed [13:0] mul_ln1118_fu_412_p1;
wire  signed [29:0] sext_ln168_fu_1026_p1;
wire  signed [17:0] mul_ln1118_2_fu_413_p0;
wire  signed [13:0] mul_ln1118_2_fu_413_p1;
wire  signed [17:0] mul_ln1118_4_fu_414_p0;
wire  signed [13:0] mul_ln1118_4_fu_414_p1;
wire  signed [17:0] mul_ln1118_6_fu_415_p0;
wire  signed [13:0] mul_ln1118_6_fu_415_p1;
wire  signed [17:0] mul_ln1118_3_fu_416_p0;
wire  signed [13:0] mul_ln1118_3_fu_416_p1;
wire  signed [17:0] mul_ln1118_7_fu_417_p0;
wire  signed [13:0] mul_ln1118_7_fu_417_p1;
wire  signed [17:0] mul_ln1118_5_fu_418_p0;
wire  signed [13:0] mul_ln1118_5_fu_418_p1;
wire  signed [17:0] mul_ln1118_1_fu_419_p0;
wire  signed [13:0] mul_ln1118_1_fu_419_p1;
wire  signed [17:0] mul_ln1118_8_fu_420_p0;
wire  signed [13:0] mul_ln1118_8_fu_420_p1;
wire  signed [17:0] mul_ln1118_9_fu_421_p0;
wire  signed [13:0] mul_ln1118_9_fu_421_p1;
wire  signed [17:0] add_ln703_fu_963_p0;
wire  signed [17:0] add_ln703_fu_963_p1;
wire  signed [17:0] add_ln703_1_fu_969_p0;
wire  signed [17:0] add_ln703_1_fu_969_p1;
wire   [17:0] add_ln703_1_fu_969_p2;
wire  signed [17:0] add_ln703_2_fu_975_p1;
wire  signed [17:0] add_ln703_4_fu_981_p0;
wire  signed [17:0] add_ln703_4_fu_981_p1;
wire   [17:0] add_ln703_5_fu_987_p2;
wire   [17:0] add_ln703_6_fu_991_p2;
wire   [17:0] add_ln703_4_fu_981_p2;
wire   [17:0] add_ln703_3_fu_1002_p2;
wire   [17:0] exp_sum_V_fu_1006_p2;
wire   [9:0] y_V_10_fu_1011_p4;
wire   [29:0] mul_ln1118_fu_412_p2;
wire   [29:0] mul_ln1118_1_fu_419_p2;
wire   [29:0] mul_ln1118_2_fu_413_p2;
wire   [29:0] mul_ln1118_3_fu_416_p2;
wire   [29:0] mul_ln1118_4_fu_414_p2;
wire   [29:0] mul_ln1118_5_fu_418_p2;
wire   [29:0] mul_ln1118_6_fu_415_p2;
wire   [29:0] mul_ln1118_7_fu_417_p2;
wire   [29:0] mul_ln1118_8_fu_420_p2;
wire   [29:0] mul_ln1118_9_fu_421_p2;
wire   [19:0] tmp_data_0_V_fu_1043_p4;
wire   [19:0] tmp_data_1_V_fu_1057_p4;
wire   [19:0] tmp_data_2_V_fu_1071_p4;
wire   [19:0] tmp_data_3_V_fu_1085_p4;
wire   [19:0] tmp_data_4_V_fu_1099_p4;
wire   [19:0] tmp_data_5_V_fu_1113_p4;
wire   [19:0] tmp_data_6_V_fu_1127_p4;
wire   [19:0] tmp_data_7_V_fu_1141_p4;
wire   [19:0] tmp_data_8_V_fu_1155_p4;
wire   [19:0] tmp_data_9_V_fu_1169_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

softmax_latency_array_array_softmax_config6_s_exp_table1 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4),
    .address5(exp_table1_address5),
    .ce5(exp_table1_ce5),
    .q5(exp_table1_q5),
    .address6(exp_table1_address6),
    .ce6(exp_table1_ce6),
    .q6(exp_table1_q6),
    .address7(exp_table1_address7),
    .ce7(exp_table1_ce7),
    .q7(exp_table1_q7),
    .address8(exp_table1_address8),
    .ce8(exp_table1_ce8),
    .q8(exp_table1_q8),
    .address9(exp_table1_address9),
    .ce9(exp_table1_ce9),
    .q9(exp_table1_q9)
);

softmax_latency_array_array_softmax_config6_s_invert_table2 #(
    .DataWidth( 14 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln703_2_reg_1387 <= add_ln703_2_fu_975_p2;
        add_ln703_7_reg_1392 <= add_ln703_7_fu_996_p2;
        add_ln703_reg_1382 <= add_ln703_fu_963_p2;
        exp_res_0_V_reg_1347_pp0_iter4_reg <= exp_res_0_V_reg_1347;
        exp_res_0_V_reg_1347_pp0_iter5_reg <= exp_res_0_V_reg_1347_pp0_iter4_reg;
        exp_res_1_V_reg_1352_pp0_iter4_reg <= exp_res_1_V_reg_1352;
        exp_res_1_V_reg_1352_pp0_iter5_reg <= exp_res_1_V_reg_1352_pp0_iter4_reg;
        exp_res_2_V_reg_1357_pp0_iter4_reg <= exp_res_2_V_reg_1357;
        exp_res_2_V_reg_1357_pp0_iter5_reg <= exp_res_2_V_reg_1357_pp0_iter4_reg;
        exp_res_3_V_reg_1362_pp0_iter4_reg <= exp_res_3_V_reg_1362;
        exp_res_3_V_reg_1362_pp0_iter5_reg <= exp_res_3_V_reg_1362_pp0_iter4_reg;
        exp_res_4_V_reg_1314_pp0_iter3_reg <= exp_res_4_V_reg_1314;
        exp_res_4_V_reg_1314_pp0_iter4_reg <= exp_res_4_V_reg_1314_pp0_iter3_reg;
        exp_res_4_V_reg_1314_pp0_iter5_reg <= exp_res_4_V_reg_1314_pp0_iter4_reg;
        exp_res_5_V_reg_1367_pp0_iter4_reg <= exp_res_5_V_reg_1367;
        exp_res_5_V_reg_1367_pp0_iter5_reg <= exp_res_5_V_reg_1367_pp0_iter4_reg;
        exp_res_6_V_reg_1372_pp0_iter4_reg <= exp_res_6_V_reg_1372;
        exp_res_6_V_reg_1372_pp0_iter5_reg <= exp_res_6_V_reg_1372_pp0_iter4_reg;
        exp_res_7_V_reg_1377_pp0_iter4_reg <= exp_res_7_V_reg_1377;
        exp_res_7_V_reg_1377_pp0_iter5_reg <= exp_res_7_V_reg_1377_pp0_iter4_reg;
        exp_res_8_V_reg_1335_pp0_iter3_reg <= exp_res_8_V_reg_1335;
        exp_res_8_V_reg_1335_pp0_iter4_reg <= exp_res_8_V_reg_1335_pp0_iter3_reg;
        exp_res_8_V_reg_1335_pp0_iter5_reg <= exp_res_8_V_reg_1335_pp0_iter4_reg;
        exp_res_9_V_reg_1341_pp0_iter3_reg <= exp_res_9_V_reg_1341;
        exp_res_9_V_reg_1341_pp0_iter4_reg <= exp_res_9_V_reg_1341_pp0_iter3_reg;
        exp_res_9_V_reg_1341_pp0_iter5_reg <= exp_res_9_V_reg_1341_pp0_iter4_reg;
        inv_exp_sum_V_reg_1402 <= invert_table2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_0_V_reg_1347 <= exp_table1_q3;
        exp_res_1_V_reg_1352 <= exp_table1_q4;
        exp_res_2_V_reg_1357 <= exp_table1_q5;
        exp_res_3_V_reg_1362 <= exp_table1_q6;
        exp_res_5_V_reg_1367 <= exp_table1_q7;
        exp_res_6_V_reg_1372 <= exp_table1_q8;
        exp_res_7_V_reg_1377 <= exp_table1_q9;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_4_V_reg_1314 <= exp_table1_q0;
        exp_res_8_V_reg_1335 <= exp_table1_q1;
        exp_res_9_V_reg_1341 <= exp_table1_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_V_1_reg_1234 <= {{data_V_data_1_V_dout[19:10]}};
        y_V_1_reg_1234_pp0_iter1_reg <= y_V_1_reg_1234;
        y_V_2_reg_1239 <= {{data_V_data_2_V_dout[19:10]}};
        y_V_2_reg_1239_pp0_iter1_reg <= y_V_2_reg_1239;
        y_V_3_reg_1244 <= {{data_V_data_3_V_dout[19:10]}};
        y_V_3_reg_1244_pp0_iter1_reg <= y_V_3_reg_1244;
        y_V_4_reg_1249 <= {{data_V_data_4_V_dout[19:10]}};
        y_V_5_reg_1254 <= {{data_V_data_5_V_dout[19:10]}};
        y_V_5_reg_1254_pp0_iter1_reg <= y_V_5_reg_1254;
        y_V_6_reg_1259 <= {{data_V_data_6_V_dout[19:10]}};
        y_V_6_reg_1259_pp0_iter1_reg <= y_V_6_reg_1259;
        y_V_7_reg_1264 <= {{data_V_data_7_V_dout[19:10]}};
        y_V_7_reg_1264_pp0_iter1_reg <= y_V_7_reg_1264;
        y_V_8_reg_1269 <= {{data_V_data_8_V_dout[19:10]}};
        y_V_9_reg_1274 <= {{data_V_data_9_V_dout[19:10]}};
        y_V_reg_1229 <= {{data_V_data_0_V_dout[19:10]}};
        y_V_reg_1229_pp0_iter1_reg <= y_V_reg_1229;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce5 = 1'b1;
    end else begin
        exp_table1_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce6 = 1'b1;
    end else begin
        exp_table1_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce7 = 1'b1;
    end else begin
        exp_table1_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce8 = 1'b1;
    end else begin
        exp_table1_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table1_ce9 = 1'b1;
    end else begin
        exp_table1_ce9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_TVALID = 1'b1;
    end else begin
        res_V_data_0_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_TVALID = 1'b1;
    end else begin
        res_V_data_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_TVALID = 1'b1;
    end else begin
        res_V_data_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_TVALID = 1'b1;
    end else begin
        res_V_data_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_TVALID = 1'b1;
    end else begin
        res_V_data_4_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_TVALID = 1'b1;
    end else begin
        res_V_data_5_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_TVALID = 1'b1;
    end else begin
        res_V_data_6_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_TVALID = 1'b1;
    end else begin
        res_V_data_7_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_TVALID = 1'b1;
    end else begin
        res_V_data_8_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_TVALID = 1'b1;
    end else begin
        res_V_data_9_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_969_p0 = exp_table1_q5;

assign add_ln703_1_fu_969_p1 = exp_table1_q9;

assign add_ln703_1_fu_969_p2 = ($signed(add_ln703_1_fu_969_p0) + $signed(add_ln703_1_fu_969_p1));

assign add_ln703_2_fu_975_p1 = exp_table1_q6;

assign add_ln703_2_fu_975_p2 = ($signed(add_ln703_1_fu_969_p2) + $signed(add_ln703_2_fu_975_p1));

assign add_ln703_3_fu_1002_p2 = (add_ln703_2_reg_1387 + add_ln703_reg_1382);

assign add_ln703_4_fu_981_p0 = exp_table1_q8;

assign add_ln703_4_fu_981_p1 = exp_table1_q7;

assign add_ln703_4_fu_981_p2 = ($signed(add_ln703_4_fu_981_p0) + $signed(add_ln703_4_fu_981_p1));

assign add_ln703_5_fu_987_p2 = ($signed(exp_res_9_V_reg_1341) + $signed(exp_res_8_V_reg_1335));

assign add_ln703_6_fu_991_p2 = ($signed(add_ln703_5_fu_987_p2) + $signed(exp_res_4_V_reg_1314));

assign add_ln703_7_fu_996_p2 = (add_ln703_6_fu_991_p2 + add_ln703_4_fu_981_p2);

assign add_ln703_fu_963_p0 = exp_table1_q3;

assign add_ln703_fu_963_p1 = exp_table1_q4;

assign add_ln703_fu_963_p2 = ($signed(add_ln703_fu_963_p0) + $signed(add_ln703_fu_963_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b1) & ((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0))) | ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b1) & ((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0))) | ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_sum_V_fu_1006_p2 = (add_ln703_7_reg_1392 + add_ln703_3_fu_1002_p2);

assign exp_table1_address0 = zext_ln156_4_fu_923_p1;

assign exp_table1_address1 = zext_ln156_8_fu_927_p1;

assign exp_table1_address2 = zext_ln156_9_fu_931_p1;

assign exp_table1_address3 = zext_ln156_fu_935_p1;

assign exp_table1_address4 = zext_ln156_1_fu_939_p1;

assign exp_table1_address5 = zext_ln156_2_fu_943_p1;

assign exp_table1_address6 = zext_ln156_3_fu_947_p1;

assign exp_table1_address7 = zext_ln156_5_fu_951_p1;

assign exp_table1_address8 = zext_ln156_6_fu_955_p1;

assign exp_table1_address9 = zext_ln156_7_fu_959_p1;

assign invert_table2_address0 = zext_ln164_fu_1021_p1;

assign io_acc_block_signal_op8 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign mul_ln1118_1_fu_419_p0 = exp_res_1_V_reg_1352_pp0_iter5_reg;

assign mul_ln1118_1_fu_419_p1 = sext_ln168_fu_1026_p1;

assign mul_ln1118_1_fu_419_p2 = ($signed(mul_ln1118_1_fu_419_p0) * $signed(mul_ln1118_1_fu_419_p1));

assign mul_ln1118_2_fu_413_p0 = exp_res_2_V_reg_1357_pp0_iter5_reg;

assign mul_ln1118_2_fu_413_p1 = sext_ln168_fu_1026_p1;

assign mul_ln1118_2_fu_413_p2 = ($signed(mul_ln1118_2_fu_413_p0) * $signed(mul_ln1118_2_fu_413_p1));

assign mul_ln1118_3_fu_416_p0 = exp_res_3_V_reg_1362_pp0_iter5_reg;

assign mul_ln1118_3_fu_416_p1 = sext_ln168_fu_1026_p1;

assign mul_ln1118_3_fu_416_p2 = ($signed(mul_ln1118_3_fu_416_p0) * $signed(mul_ln1118_3_fu_416_p1));

assign mul_ln1118_4_fu_414_p0 = exp_res_4_V_reg_1314_pp0_iter5_reg;

assign mul_ln1118_4_fu_414_p1 = sext_ln168_fu_1026_p1;

assign mul_ln1118_4_fu_414_p2 = ($signed(mul_ln1118_4_fu_414_p0) * $signed(mul_ln1118_4_fu_414_p1));

assign mul_ln1118_5_fu_418_p0 = exp_res_5_V_reg_1367_pp0_iter5_reg;

assign mul_ln1118_5_fu_418_p1 = sext_ln168_fu_1026_p1;

assign mul_ln1118_5_fu_418_p2 = ($signed(mul_ln1118_5_fu_418_p0) * $signed(mul_ln1118_5_fu_418_p1));

assign mul_ln1118_6_fu_415_p0 = exp_res_6_V_reg_1372_pp0_iter5_reg;

assign mul_ln1118_6_fu_415_p1 = sext_ln168_fu_1026_p1;

assign mul_ln1118_6_fu_415_p2 = ($signed(mul_ln1118_6_fu_415_p0) * $signed(mul_ln1118_6_fu_415_p1));

assign mul_ln1118_7_fu_417_p0 = exp_res_7_V_reg_1377_pp0_iter5_reg;

assign mul_ln1118_7_fu_417_p1 = sext_ln168_fu_1026_p1;

assign mul_ln1118_7_fu_417_p2 = ($signed(mul_ln1118_7_fu_417_p0) * $signed(mul_ln1118_7_fu_417_p1));

assign mul_ln1118_8_fu_420_p0 = exp_res_8_V_reg_1335_pp0_iter5_reg;

assign mul_ln1118_8_fu_420_p1 = sext_ln168_fu_1026_p1;

assign mul_ln1118_8_fu_420_p2 = ($signed(mul_ln1118_8_fu_420_p0) * $signed(mul_ln1118_8_fu_420_p1));

assign mul_ln1118_9_fu_421_p0 = exp_res_9_V_reg_1341_pp0_iter5_reg;

assign mul_ln1118_9_fu_421_p1 = sext_ln168_fu_1026_p1;

assign mul_ln1118_9_fu_421_p2 = ($signed(mul_ln1118_9_fu_421_p0) * $signed(mul_ln1118_9_fu_421_p1));

assign mul_ln1118_fu_412_p0 = exp_res_0_V_reg_1347_pp0_iter5_reg;

assign mul_ln1118_fu_412_p1 = sext_ln168_fu_1026_p1;

assign mul_ln1118_fu_412_p2 = ($signed(mul_ln1118_fu_412_p0) * $signed(mul_ln1118_fu_412_p1));

assign res_V_data_0_V_TDATA = tmp_data_0_V_fu_1043_p4;

assign res_V_data_1_V_TDATA = tmp_data_1_V_fu_1057_p4;

assign res_V_data_2_V_TDATA = tmp_data_2_V_fu_1071_p4;

assign res_V_data_3_V_TDATA = tmp_data_3_V_fu_1085_p4;

assign res_V_data_4_V_TDATA = tmp_data_4_V_fu_1099_p4;

assign res_V_data_5_V_TDATA = tmp_data_5_V_fu_1113_p4;

assign res_V_data_6_V_TDATA = tmp_data_6_V_fu_1127_p4;

assign res_V_data_7_V_TDATA = tmp_data_7_V_fu_1141_p4;

assign res_V_data_8_V_TDATA = tmp_data_8_V_fu_1155_p4;

assign res_V_data_9_V_TDATA = tmp_data_9_V_fu_1169_p4;

assign sext_ln168_fu_1026_p1 = $signed(inv_exp_sum_V_reg_1402);

assign tmp_data_0_V_fu_1043_p4 = {{mul_ln1118_fu_412_p2[29:10]}};

assign tmp_data_1_V_fu_1057_p4 = {{mul_ln1118_1_fu_419_p2[29:10]}};

assign tmp_data_2_V_fu_1071_p4 = {{mul_ln1118_2_fu_413_p2[29:10]}};

assign tmp_data_3_V_fu_1085_p4 = {{mul_ln1118_3_fu_416_p2[29:10]}};

assign tmp_data_4_V_fu_1099_p4 = {{mul_ln1118_4_fu_414_p2[29:10]}};

assign tmp_data_5_V_fu_1113_p4 = {{mul_ln1118_5_fu_418_p2[29:10]}};

assign tmp_data_6_V_fu_1127_p4 = {{mul_ln1118_6_fu_415_p2[29:10]}};

assign tmp_data_7_V_fu_1141_p4 = {{mul_ln1118_7_fu_417_p2[29:10]}};

assign tmp_data_8_V_fu_1155_p4 = {{mul_ln1118_8_fu_420_p2[29:10]}};

assign tmp_data_9_V_fu_1169_p4 = {{mul_ln1118_9_fu_421_p2[29:10]}};

assign y_V_10_fu_1011_p4 = {{exp_sum_V_fu_1006_p2[17:8]}};

assign zext_ln156_1_fu_939_p1 = y_V_1_reg_1234_pp0_iter1_reg;

assign zext_ln156_2_fu_943_p1 = y_V_2_reg_1239_pp0_iter1_reg;

assign zext_ln156_3_fu_947_p1 = y_V_3_reg_1244_pp0_iter1_reg;

assign zext_ln156_4_fu_923_p1 = y_V_4_reg_1249;

assign zext_ln156_5_fu_951_p1 = y_V_5_reg_1254_pp0_iter1_reg;

assign zext_ln156_6_fu_955_p1 = y_V_6_reg_1259_pp0_iter1_reg;

assign zext_ln156_7_fu_959_p1 = y_V_7_reg_1264_pp0_iter1_reg;

assign zext_ln156_8_fu_927_p1 = y_V_8_reg_1269;

assign zext_ln156_9_fu_931_p1 = y_V_9_reg_1274;

assign zext_ln156_fu_935_p1 = y_V_reg_1229_pp0_iter1_reg;

assign zext_ln164_fu_1021_p1 = y_V_10_fu_1011_p4;

endmodule //softmax_latency_array_array_softmax_config6_s
