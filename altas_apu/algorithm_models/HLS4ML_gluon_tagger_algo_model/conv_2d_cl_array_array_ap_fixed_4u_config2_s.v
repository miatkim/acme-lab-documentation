// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_2d_cl_array_array_ap_fixed_4u_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_V_TDATA,
        data_V_data_V_TVALID,
        data_V_data_V_TREADY,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_V_TDATA;
input   data_V_data_V_TVALID;
output   data_V_data_V_TREADY;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_V_TREADY;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [15:0] kernel_data_V_1160;
reg   [15:0] kernel_data_V_3;
reg   [31:0] sX_1;
reg   [31:0] sY_1;
reg   [31:0] pY_1;
reg   [31:0] pX_1;
reg    data_V_data_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln78_fu_1031_p2;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] and_ln272_2_reg_1733;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [7:0] indvar_flatten_reg_218;
reg   [15:0] kernel_data_V_1160_loc_1_reg_229;
reg   [15:0] kernel_data_V_3_loc_1_reg_239;
reg    ap_block_state1;
reg   [0:0] icmp_ln78_reg_1709;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op162;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln78_reg_1709_pp0_iter1_reg;
wire   [7:0] add_ln78_fu_1037_p2;
reg   [15:0] tmp_data_0_V_reg_1718;
reg  signed [15:0] kernel_data_V_1160_ret_reg_1723;
reg    ap_enable_reg_pp0_iter1;
reg  signed [15:0] kernel_data_V_3_ret_reg_1728;
wire   [0:0] and_ln272_2_fu_1119_p2;
wire   [13:0] add_ln731_fu_1413_p2;
reg   [13:0] add_ln731_reg_1737;
wire   [13:0] add_ln731_2_fu_1435_p2;
reg   [13:0] add_ln731_2_reg_1742;
wire   [13:0] add_ln731_3_fu_1457_p2;
reg   [13:0] add_ln731_3_reg_1747;
wire   [13:0] add_ln731_4_fu_1475_p2;
reg   [13:0] add_ln731_4_reg_1752;
wire   [0:0] icmp_ln293_fu_1484_p2;
reg   [0:0] icmp_ln293_reg_1757;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_start;
wire    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_done;
wire    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_idle;
wire    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_ready;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_0;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_1;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_2;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_3;
reg    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_ce;
reg    ap_block_state2_pp0_stage0_iter0_ignore_call11;
wire    ap_block_state3_pp0_stage0_iter1_ignore_call11;
reg    ap_block_state4_pp0_stage0_iter2_ignore_call11;
reg    ap_block_pp0_stage0_11001_ignoreCallOp38;
reg   [15:0] ap_phi_mux_kernel_data_V_1160_loc_1_phi_fu_232_p4;
reg   [15:0] ap_phi_mux_kernel_data_V_3_loc_1_phi_fu_242_p4;
reg    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_start_reg;
wire   [31:0] select_ln308_fu_1511_p3;
wire   [31:0] add_ln301_fu_1559_p2;
wire   [0:0] icmp_ln297_fu_1550_p2;
wire   [31:0] add_ln306_fu_1493_p2;
reg   [31:0] pX_1_loc_1_fu_180;
reg   [31:0] sX_1_loc_1_fu_184;
reg   [31:0] pY_1_loc_1_fu_188;
reg   [31:0] sY_1_loc_1_fu_192;
wire   [31:0] select_ln303_fu_1577_p3;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] mul_ln1118_307_fu_249_p0;
wire  signed [15:0] mul_ln1118_302_fu_251_p0;
wire  signed [25:0] sext_ln1118_644_fu_1174_p1;
wire  signed [15:0] mul_ln1118_299_fu_252_p0;
wire  signed [25:0] sext_ln1118_fu_1125_p1;
wire  signed [15:0] mul_ln1118_301_fu_253_p0;
wire  signed [15:0] mul_ln1118_300_fu_254_p0;
wire  signed [15:0] mul_ln1118_304_fu_257_p0;
wire  signed [15:0] mul_ln1118_fu_258_p0;
wire  signed [15:0] mul_ln1118_303_fu_262_p0;
wire  signed [15:0] mul_ln1118_305_fu_263_p0;
wire  signed [15:0] mul_ln1118_306_fu_264_p0;
wire   [0:0] icmp_ln272_fu_1083_p2;
wire   [0:0] icmp_ln272_1_fu_1089_p2;
wire   [0:0] icmp_ln272_2_fu_1095_p2;
wire   [0:0] icmp_ln272_3_fu_1101_p2;
wire   [0:0] and_ln272_1_fu_1113_p2;
wire   [0:0] and_ln272_fu_1107_p2;
wire  signed [15:0] sext_ln1118_fu_1125_p0;
wire  signed [15:0] sext_ln1118_640_fu_1131_p0;
wire  signed [15:0] sext_ln1118_641_fu_1136_p0;
wire   [22:0] mul_ln1118_fu_258_p2;
wire   [10:0] trunc_ln_fu_1140_p4;
wire  signed [16:0] sext_ln1118_641_fu_1136_p1;
wire   [16:0] sub_ln1118_fu_1154_p2;
wire   [4:0] trunc_ln708_s_fu_1160_p4;
wire  signed [15:0] sext_ln1118_644_fu_1174_p0;
wire  signed [15:0] sext_ln1118_645_fu_1181_p0;
wire  signed [15:0] sext_ln1118_646_fu_1186_p0;
wire  signed [15:0] sext_ln1118_647_fu_1191_p0;
wire   [24:0] mul_ln1118_304_fu_257_p2;
wire   [12:0] trunc_ln708_367_fu_1195_p4;
wire  signed [16:0] sext_ln1118_647_fu_1191_p1;
wire   [16:0] sub_ln1118_75_fu_1209_p2;
wire  signed [4:0] trunc_ln708_368_fu_1215_p4;
wire  signed [15:0] sext_ln1118_649_fu_1233_p0;
wire  signed [15:0] sext_ln1118_650_fu_1238_p0;
wire  signed [15:0] sext_ln1118_651_fu_1243_p0;
wire  signed [15:0] sext_ln1118_652_fu_1247_p0;
wire  signed [15:0] shl_ln_fu_1251_p1;
wire   [19:0] shl_ln_fu_1251_p3;
wire  signed [20:0] sext_ln1118_651_fu_1243_p1;
wire  signed [20:0] sext_ln1118_653_fu_1259_p1;
wire   [20:0] add_ln1118_fu_1263_p2;
wire   [8:0] trunc_ln708_369_fu_1269_p4;
wire   [24:0] mul_ln1118_306_fu_264_p2;
wire   [12:0] trunc_ln708_370_fu_1283_p4;
wire  signed [16:0] sext_ln1118_652_fu_1247_p1;
wire   [16:0] sub_ln1118_76_fu_1297_p2;
wire   [4:0] trunc_ln708_371_fu_1303_p4;
wire   [25:0] mul_ln1118_299_fu_252_p2;
wire   [25:0] mul_ln1118_301_fu_253_p2;
wire   [25:0] mul_ln1118_302_fu_251_p2;
wire   [25:0] mul_ln1118_303_fu_262_p2;
wire   [25:0] mul_ln1118_300_fu_254_p2;
wire   [25:0] mul_ln1118_305_fu_263_p2;
wire   [25:0] mul_ln1118_307_fu_249_p2;
wire  signed [13:0] sext_ln708_fu_1205_p1;
wire   [13:0] trunc_ln703_s_fu_1327_p4;
wire  signed [9:0] sext_ln1118_654_fu_1279_p1;
wire   [9:0] add_ln731_392_fu_1393_p2;
wire  signed [11:0] sext_ln1118_642_fu_1150_p1;
wire  signed [11:0] sext_ln731_fu_1399_p1;
wire   [11:0] add_ln731_393_fu_1403_p2;
wire   [13:0] add_ln731_391_fu_1387_p2;
wire  signed [13:0] sext_ln731_150_fu_1409_p1;
wire  signed [13:0] sext_ln708_154_fu_1293_p1;
wire   [13:0] trunc_ln4_fu_1317_p4;
wire  signed [5:0] sext_ln1118_648_fu_1229_p1;
wire   [5:0] add_ln731_395_fu_1425_p2;
wire   [13:0] add_ln731_394_fu_1419_p2;
wire   [13:0] zext_ln731_fu_1431_p1;
wire   [13:0] trunc_ln703_22_fu_1337_p4;
wire   [13:0] trunc_ln703_25_fu_1367_p4;
wire  signed [5:0] sext_ln1118_655_fu_1313_p1;
wire  signed [5:0] sext_ln1118_643_fu_1170_p1;
wire   [5:0] add_ln731_397_fu_1447_p2;
wire   [13:0] add_ln731_396_fu_1441_p2;
wire  signed [13:0] sext_ln731_151_fu_1453_p1;
wire   [13:0] trunc_ln703_23_fu_1347_p4;
wire   [13:0] trunc_ln703_24_fu_1357_p4;
wire  signed [13:0] sext_ln708_153_fu_1225_p1;
wire   [13:0] trunc_ln703_26_fu_1377_p4;
wire   [13:0] add_ln731_398_fu_1463_p2;
wire   [13:0] add_ln731_399_fu_1469_p2;
wire   [31:0] add_ln308_fu_1505_p2;
wire   [31:0] add_ln303_fu_1571_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_data_V_data_V_U_apdone_blk;
wire   [15:0] data_V_data_V_TDATA_int;
wire    data_V_data_V_TVALID_int;
reg    data_V_data_V_TREADY_int;
wire    regslice_both_data_V_data_V_U_ack_in;
reg    ap_condition_139;
reg    ap_condition_208;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 kernel_data_V_1160 = 16'd0;
#0 kernel_data_V_3 = 16'd0;
#0 sX_1 = 32'd0;
#0 sY_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 pX_1 = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_start_reg = 1'b0;
end

shift_line_buffer_array_ap_fixed_1u_config2_s call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_start),
    .ap_done(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_done),
    .ap_idle(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_idle),
    .ap_ready(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_ready),
    .in_elem_data_V_read(tmp_data_0_V_reg_1718),
    .kernel_window_1_V_read(ap_phi_mux_kernel_data_V_1160_loc_1_phi_fu_232_p4),
    .kernel_window_3_V_read(ap_phi_mux_kernel_data_V_3_loc_1_phi_fu_242_p4),
    .ap_return_0(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_0),
    .ap_return_1(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_1),
    .ap_return_2(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_2),
    .ap_return_3(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_3),
    .ap_ce(call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_ce)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_data_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data_V_data_V_TDATA),
    .vld_in(data_V_data_V_TVALID),
    .ack_in(regslice_both_data_V_data_V_U_ack_in),
    .data_out(data_V_data_V_TDATA_int),
    .vld_out(data_V_data_V_TVALID_int),
    .ack_out(data_V_data_V_TREADY_int),
    .apdone_blk(regslice_both_data_V_data_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln78_fu_1031_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_start_reg <= 1'b1;
        end else if ((call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_ready == 1'b1)) begin
            call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_1031_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_218 <= add_ln78_fu_1037_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_218 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_1709_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_data_V_1160_loc_1_reg_229 <= kernel_data_V_1160_ret_reg_1723;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_1160_loc_1_reg_229 <= kernel_data_V_1160;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_1709_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_data_V_3_loc_1_reg_239 <= kernel_data_V_3_ret_reg_1728;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_3_loc_1_reg_239 <= kernel_data_V_3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_139)) begin
        if ((icmp_ln293_fu_1484_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((icmp_ln293_fu_1484_p2 == 1'd0)) begin
            pX_1 <= add_ln306_fu_1493_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln293_fu_1484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pX_1_loc_1_fu_180 <= 32'd0;
    end else if (((icmp_ln293_fu_1484_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pX_1_loc_1_fu_180 <= add_ln306_fu_1493_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pX_1_loc_1_fu_180 <= pX_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_208)) begin
        if ((icmp_ln297_fu_1550_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((icmp_ln297_fu_1550_p2 == 1'd0)) begin
            pY_1 <= add_ln301_fu_1559_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln297_fu_1550_p2 == 1'd1) & (icmp_ln293_fu_1484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pY_1_loc_1_fu_188 <= 32'd0;
    end else if (((icmp_ln293_fu_1484_p2 == 1'd1) & (icmp_ln297_fu_1550_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pY_1_loc_1_fu_188 <= add_ln301_fu_1559_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pY_1_loc_1_fu_188 <= pY_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_139)) begin
        if ((icmp_ln293_fu_1484_p2 == 1'd1)) begin
            sX_1 <= 32'd0;
        end else if ((icmp_ln293_fu_1484_p2 == 1'd0)) begin
            sX_1 <= select_ln308_fu_1511_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln293_fu_1484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sX_1_loc_1_fu_184 <= 32'd0;
    end else if (((icmp_ln293_fu_1484_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sX_1_loc_1_fu_184 <= select_ln308_fu_1511_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sX_1_loc_1_fu_184 <= sX_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln297_fu_1550_p2 == 1'd1) & (icmp_ln293_fu_1484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sY_1_loc_1_fu_192 <= 32'd0;
    end else if (((icmp_ln293_fu_1484_p2 == 1'd1) & (icmp_ln297_fu_1550_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sY_1_loc_1_fu_192 <= select_ln303_fu_1577_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sY_1_loc_1_fu_192 <= sY_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln272_2_fu_1119_p2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln731_2_reg_1742 <= add_ln731_2_fu_1435_p2;
        add_ln731_3_reg_1747 <= add_ln731_3_fu_1457_p2;
        add_ln731_4_reg_1752 <= add_ln731_4_fu_1475_p2;
        add_ln731_reg_1737 <= add_ln731_fu_1413_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_1709 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln272_2_reg_1733 <= and_ln272_2_fu_1119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln293_reg_1757 <= icmp_ln293_fu_1484_p2;
        icmp_ln78_reg_1709 <= icmp_ln78_fu_1031_p2;
        icmp_ln78_reg_1709_pp0_iter1_reg <= icmp_ln78_reg_1709;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_1709 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_data_V_1160 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_2;
        kernel_data_V_1160_ret_reg_1723 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_2;
        kernel_data_V_3 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_3;
        kernel_data_V_3_ret_reg_1728 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln293_reg_1757 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sY_1 <= sY_1_loc_1_fu_192;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_1031_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_reg_1718 <= data_V_data_V_TDATA_int;
    end
end

always @ (*) begin
    if ((icmp_ln78_fu_1031_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_1709_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_kernel_data_V_1160_loc_1_phi_fu_232_p4 = kernel_data_V_1160_ret_reg_1723;
    end else begin
        ap_phi_mux_kernel_data_V_1160_loc_1_phi_fu_232_p4 = kernel_data_V_1160_loc_1_reg_229;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_1709_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_kernel_data_V_3_loc_1_phi_fu_242_p4 = kernel_data_V_3_ret_reg_1728;
    end else begin
        ap_phi_mux_kernel_data_V_3_loc_1_phi_fu_242_p4 = kernel_data_V_3_loc_1_reg_239;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp38))) begin
        call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_ce = 1'b1;
    end else begin
        call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_1031_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_V_TDATA_blk_n = data_V_data_V_TVALID_int;
    end else begin
        data_V_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_data_V_data_V_U_ack_in == 1'b1) & (data_V_data_V_TVALID == 1'b1))) begin
        data_V_data_V_TREADY = 1'b1;
    end else begin
        data_V_data_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_1031_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_V_TREADY_int = 1'b1;
    end else begin
        data_V_data_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln272_2_reg_1733) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln272_2_reg_1733) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln272_2_reg_1733) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln272_2_reg_1733) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln272_2_reg_1733) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln272_2_reg_1733) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln272_2_reg_1733) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln272_2_reg_1733) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln78_fu_1031_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln78_fu_1031_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1118_fu_1263_p2 = ($signed(sext_ln1118_651_fu_1243_p1) + $signed(sext_ln1118_653_fu_1259_p1));

assign add_ln301_fu_1559_p2 = (pY_1_loc_1_fu_188 + 32'd1);

assign add_ln303_fu_1571_p2 = (sY_1_loc_1_fu_192 + 32'd1);

assign add_ln306_fu_1493_p2 = (pX_1_loc_1_fu_180 + 32'd1);

assign add_ln308_fu_1505_p2 = (sX_1_loc_1_fu_184 + 32'd1);

assign add_ln731_2_fu_1435_p2 = (add_ln731_394_fu_1419_p2 + zext_ln731_fu_1431_p1);

assign add_ln731_391_fu_1387_p2 = ($signed(sext_ln708_fu_1205_p1) + $signed(trunc_ln703_s_fu_1327_p4));

assign add_ln731_392_fu_1393_p2 = ($signed(sext_ln1118_654_fu_1279_p1) + $signed(10'd1019));

assign add_ln731_393_fu_1403_p2 = ($signed(sext_ln1118_642_fu_1150_p1) + $signed(sext_ln731_fu_1399_p1));

assign add_ln731_394_fu_1419_p2 = ($signed(sext_ln708_154_fu_1293_p1) + $signed(trunc_ln4_fu_1317_p4));

assign add_ln731_395_fu_1425_p2 = ($signed(sext_ln1118_648_fu_1229_p1) + $signed(6'd22));

assign add_ln731_396_fu_1441_p2 = (trunc_ln703_22_fu_1337_p4 + trunc_ln703_25_fu_1367_p4);

assign add_ln731_397_fu_1447_p2 = ($signed(sext_ln1118_655_fu_1313_p1) + $signed(sext_ln1118_643_fu_1170_p1));

assign add_ln731_398_fu_1463_p2 = (trunc_ln703_23_fu_1347_p4 + trunc_ln703_24_fu_1357_p4);

assign add_ln731_399_fu_1469_p2 = ($signed(sext_ln708_153_fu_1225_p1) + $signed(trunc_ln703_26_fu_1377_p4));

assign add_ln731_3_fu_1457_p2 = ($signed(add_ln731_396_fu_1441_p2) + $signed(sext_ln731_151_fu_1453_p1));

assign add_ln731_4_fu_1475_p2 = (add_ln731_398_fu_1463_p2 + add_ln731_399_fu_1469_p2);

assign add_ln731_fu_1413_p2 = ($signed(add_ln731_391_fu_1387_p2) + $signed(sext_ln731_150_fu_1409_p1));

assign add_ln78_fu_1037_p2 = (indvar_flatten_reg_218 + 8'd1);

assign and_ln272_1_fu_1113_p2 = (icmp_ln272_3_fu_1101_p2 & icmp_ln272_2_fu_1095_p2);

assign and_ln272_2_fu_1119_p2 = (and_ln272_fu_1107_p2 & and_ln272_1_fu_1113_p2);

assign and_ln272_fu_1107_p2 = (icmp_ln272_fu_1083_p2 & icmp_ln272_1_fu_1089_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'd1 == and_ln272_2_reg_1733) & (io_acc_block_signal_op162 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln78_fu_1031_p2 == 1'd0) & (data_V_data_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'd1 == and_ln272_2_reg_1733) & (io_acc_block_signal_op162 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln78_fu_1031_p2 == 1'd0) & (data_V_data_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp38 = (((1'd1 == and_ln272_2_reg_1733) & (io_acc_block_signal_op162 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln78_fu_1031_p2 == 1'd0) & (data_V_data_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'd1 == and_ln272_2_reg_1733) & (io_acc_block_signal_op162 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln78_fu_1031_p2 == 1'd0) & (data_V_data_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln78_fu_1031_p2 == 1'd0) & (data_V_data_V_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0_ignore_call11 = ((icmp_ln78_fu_1031_p2 == 1'd0) & (data_V_data_V_TVALID_int == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1_ignore_call11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((1'd1 == and_ln272_2_reg_1733) & (io_acc_block_signal_op162 == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2_ignore_call11 = ((1'd1 == and_ln272_2_reg_1733) & (io_acc_block_signal_op162 == 1'b0));
end

always @ (*) begin
    ap_condition_139 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_208 = ((icmp_ln293_fu_1484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_start = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_start_reg;

assign icmp_ln272_1_fu_1089_p2 = ((sY_1_loc_1_fu_192 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln272_2_fu_1095_p2 = (($signed(pY_1_loc_1_fu_188) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln272_3_fu_1101_p2 = (($signed(pX_1_loc_1_fu_180) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln272_fu_1083_p2 = ((sX_1_loc_1_fu_184 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln293_fu_1484_p2 = ((pX_1_loc_1_fu_180 == 32'd14) ? 1'b1 : 1'b0);

assign icmp_ln297_fu_1550_p2 = ((pY_1_loc_1_fu_188 == 32'd14) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_1031_p2 = ((indvar_flatten_reg_218 == 8'd225) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op162 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign mul_ln1118_299_fu_252_p0 = sext_ln1118_fu_1125_p1;

assign mul_ln1118_299_fu_252_p2 = ($signed(mul_ln1118_299_fu_252_p0) * $signed('h1BC));

assign mul_ln1118_300_fu_254_p0 = sext_ln1118_fu_1125_p1;

assign mul_ln1118_300_fu_254_p2 = ($signed(mul_ln1118_300_fu_254_p0) * $signed('h149));

assign mul_ln1118_301_fu_253_p0 = sext_ln1118_644_fu_1174_p1;

assign mul_ln1118_301_fu_253_p2 = ($signed(mul_ln1118_301_fu_253_p0) * $signed(-'h1E1));

assign mul_ln1118_302_fu_251_p0 = sext_ln1118_644_fu_1174_p1;

assign mul_ln1118_302_fu_251_p2 = ($signed(mul_ln1118_302_fu_251_p0) * $signed('h321));

assign mul_ln1118_303_fu_262_p0 = sext_ln1118_644_fu_1174_p1;

assign mul_ln1118_303_fu_262_p2 = ($signed(mul_ln1118_303_fu_262_p0) * $signed('h149));

assign mul_ln1118_304_fu_257_p0 = sext_ln1118_646_fu_1186_p0;

assign mul_ln1118_304_fu_257_p2 = ($signed(mul_ln1118_304_fu_257_p0) * $signed(-'hE7));

assign mul_ln1118_305_fu_263_p0 = sext_ln1118_645_fu_1181_p0;

assign mul_ln1118_305_fu_263_p2 = ($signed(mul_ln1118_305_fu_263_p0) * $signed('h15B));

assign mul_ln1118_306_fu_264_p0 = sext_ln1118_650_fu_1238_p0;

assign mul_ln1118_306_fu_264_p2 = ($signed(mul_ln1118_306_fu_264_p0) * $signed(-'h8E));

assign mul_ln1118_307_fu_249_p0 = sext_ln1118_649_fu_1233_p0;

assign mul_ln1118_307_fu_249_p2 = ($signed(mul_ln1118_307_fu_249_p0) * $signed('h304));

assign mul_ln1118_fu_258_p0 = sext_ln1118_640_fu_1131_p0;

assign mul_ln1118_fu_258_p2 = ($signed(mul_ln1118_fu_258_p0) * $signed(-'h2D));

assign res_V_data_0_V_din = {{add_ln731_reg_1737}, {2'd0}};

assign res_V_data_1_V_din = {{add_ln731_2_reg_1742}, {2'd0}};

assign res_V_data_2_V_din = {{add_ln731_3_reg_1747}, {2'd0}};

assign res_V_data_3_V_din = {{add_ln731_4_reg_1752}, {2'd0}};

assign select_ln303_fu_1577_p3 = ((icmp_ln272_1_fu_1089_p2[0:0] === 1'b1) ? 32'd1 : add_ln303_fu_1571_p2);

assign select_ln308_fu_1511_p3 = ((icmp_ln272_fu_1083_p2[0:0] === 1'b1) ? 32'd1 : add_ln308_fu_1505_p2);

assign sext_ln1118_640_fu_1131_p0 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_0;

assign sext_ln1118_641_fu_1136_p0 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_0;

assign sext_ln1118_641_fu_1136_p1 = sext_ln1118_641_fu_1136_p0;

assign sext_ln1118_642_fu_1150_p1 = $signed(trunc_ln_fu_1140_p4);

assign sext_ln1118_643_fu_1170_p1 = $signed(trunc_ln708_s_fu_1160_p4);

assign sext_ln1118_644_fu_1174_p0 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_2;

assign sext_ln1118_644_fu_1174_p1 = sext_ln1118_644_fu_1174_p0;

assign sext_ln1118_645_fu_1181_p0 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_1;

assign sext_ln1118_646_fu_1186_p0 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_1;

assign sext_ln1118_647_fu_1191_p0 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_1;

assign sext_ln1118_647_fu_1191_p1 = sext_ln1118_647_fu_1191_p0;

assign sext_ln1118_648_fu_1229_p1 = trunc_ln708_368_fu_1215_p4;

assign sext_ln1118_649_fu_1233_p0 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_3;

assign sext_ln1118_650_fu_1238_p0 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_3;

assign sext_ln1118_651_fu_1243_p0 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_3;

assign sext_ln1118_651_fu_1243_p1 = sext_ln1118_651_fu_1243_p0;

assign sext_ln1118_652_fu_1247_p0 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_3;

assign sext_ln1118_652_fu_1247_p1 = sext_ln1118_652_fu_1247_p0;

assign sext_ln1118_653_fu_1259_p1 = $signed(shl_ln_fu_1251_p3);

assign sext_ln1118_654_fu_1279_p1 = $signed(trunc_ln708_369_fu_1269_p4);

assign sext_ln1118_655_fu_1313_p1 = $signed(trunc_ln708_371_fu_1303_p4);

assign sext_ln1118_fu_1125_p0 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_0;

assign sext_ln1118_fu_1125_p1 = sext_ln1118_fu_1125_p0;

assign sext_ln708_153_fu_1225_p1 = trunc_ln708_368_fu_1215_p4;

assign sext_ln708_154_fu_1293_p1 = $signed(trunc_ln708_370_fu_1283_p4);

assign sext_ln708_fu_1205_p1 = $signed(trunc_ln708_367_fu_1195_p4);

assign sext_ln731_150_fu_1409_p1 = $signed(add_ln731_393_fu_1403_p2);

assign sext_ln731_151_fu_1453_p1 = $signed(add_ln731_397_fu_1447_p2);

assign sext_ln731_fu_1399_p1 = $signed(add_ln731_392_fu_1393_p2);

assign shl_ln_fu_1251_p1 = call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_976_ap_return_3;

assign shl_ln_fu_1251_p3 = {{shl_ln_fu_1251_p1}, {4'd0}};

assign start_out = real_start;

assign sub_ln1118_75_fu_1209_p2 = ($signed(17'd0) - $signed(sext_ln1118_647_fu_1191_p1));

assign sub_ln1118_76_fu_1297_p2 = ($signed(17'd0) - $signed(sext_ln1118_652_fu_1247_p1));

assign sub_ln1118_fu_1154_p2 = ($signed(17'd0) - $signed(sext_ln1118_641_fu_1136_p1));

assign trunc_ln4_fu_1317_p4 = {{mul_ln1118_299_fu_252_p2[25:12]}};

assign trunc_ln703_22_fu_1337_p4 = {{mul_ln1118_302_fu_251_p2[25:12]}};

assign trunc_ln703_23_fu_1347_p4 = {{mul_ln1118_303_fu_262_p2[25:12]}};

assign trunc_ln703_24_fu_1357_p4 = {{mul_ln1118_300_fu_254_p2[25:12]}};

assign trunc_ln703_25_fu_1367_p4 = {{mul_ln1118_305_fu_263_p2[25:12]}};

assign trunc_ln703_26_fu_1377_p4 = {{mul_ln1118_307_fu_249_p2[25:12]}};

assign trunc_ln703_s_fu_1327_p4 = {{mul_ln1118_301_fu_253_p2[25:12]}};

assign trunc_ln708_367_fu_1195_p4 = {{mul_ln1118_304_fu_257_p2[24:12]}};

assign trunc_ln708_368_fu_1215_p4 = {{sub_ln1118_75_fu_1209_p2[16:12]}};

assign trunc_ln708_369_fu_1269_p4 = {{add_ln1118_fu_1263_p2[20:12]}};

assign trunc_ln708_370_fu_1283_p4 = {{mul_ln1118_306_fu_264_p2[24:12]}};

assign trunc_ln708_371_fu_1303_p4 = {{sub_ln1118_76_fu_1297_p2[16:12]}};

assign trunc_ln708_s_fu_1160_p4 = {{sub_ln1118_fu_1154_p2[16:12]}};

assign trunc_ln_fu_1140_p4 = {{mul_ln1118_fu_258_p2[22:12]}};

assign zext_ln731_fu_1431_p1 = add_ln731_395_fu_1425_p2;

endmodule //conv_2d_cl_array_array_ap_fixed_4u_config2_s
