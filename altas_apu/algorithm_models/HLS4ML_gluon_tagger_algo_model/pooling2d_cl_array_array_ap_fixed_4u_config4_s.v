// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_array_ap_fixed_4u_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX;
reg   [31:0] sX;
reg   [31:0] pY;
reg   [31:0] sY;
reg   [15:0] kernel_data_V_1_4;
reg   [15:0] kernel_data_V_1_5;
reg   [15:0] kernel_data_V_1_6;
reg   [15:0] kernel_data_V_1_7;
reg   [15:0] kernel_data_V_1_12;
reg   [15:0] kernel_data_V_1_13;
reg   [15:0] kernel_data_V_1_14;
reg   [15:0] kernel_data_V_1_15;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln233_reg_768;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] and_ln185_2_reg_797;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [7:0] indvar_flatten_reg_218;
wire   [0:0] icmp_ln233_fu_264_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op19;
reg    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op117;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln233_reg_768_pp0_iter1_reg;
wire   [7:0] add_ln233_fu_270_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_data_0_V_reg_777;
reg   [15:0] tmp_data_1_V_reg_782;
reg   [15:0] tmp_data_2_V_reg_787;
reg   [15:0] tmp_data_3_V_reg_792;
wire   [0:0] and_ln185_2_fu_344_p2;
wire   [0:0] icmp_ln203_fu_350_p2;
reg   [0:0] icmp_ln203_reg_801;
wire   [0:0] icmp_ln207_fu_400_p2;
wire   [31:0] select_ln213_fu_424_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_start;
wire    call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_done;
wire    call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_idle;
wire    call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_ready;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_0;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_1;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_2;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_3;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_4;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_5;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_6;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_7;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_8;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_9;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_10;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_11;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_12;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_13;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_14;
wire   [15:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_15;
reg    call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call18;
reg    ap_block_state3_pp0_stage0_iter1_ignore_call18;
reg    ap_block_state4_pp0_stage0_iter2_ignore_call18;
reg    ap_block_pp0_stage0_11001_ignoreCallOp68;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_229;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_229;
reg   [31:0] ap_phi_reg_pp0_iter2_storemerge_i_i_reg_229;
reg    call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_start_reg;
wire   [31:0] add_ln216_fu_356_p2;
wire   [31:0] select_ln218_fu_374_p3;
wire   [31:0] add_ln211_fu_406_p2;
reg   [31:0] ap_sig_allocacmp_sY_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln185_fu_296_p2;
wire   [0:0] icmp_ln185_1_fu_306_p2;
wire   [0:0] icmp_ln185_2_fu_316_p2;
wire   [0:0] icmp_ln185_3_fu_326_p2;
wire   [0:0] and_ln185_1_fu_338_p2;
wire   [0:0] and_ln185_fu_332_p2;
wire   [31:0] add_ln218_fu_368_p2;
wire   [31:0] add_ln213_fu_418_p2;
wire   [0:0] icmp_ln1496_fu_590_p2;
wire   [0:0] icmp_ln1496_1_fu_604_p2;
wire   [15:0] select_ln86_fu_596_p3;
wire   [15:0] select_ln86_1_fu_610_p3;
wire   [0:0] icmp_ln1496_2_fu_618_p2;
wire   [0:0] icmp_ln1496_3_fu_633_p2;
wire   [0:0] icmp_ln1496_4_fu_647_p2;
wire   [15:0] select_ln86_3_fu_639_p3;
wire   [15:0] select_ln86_4_fu_653_p3;
wire   [0:0] icmp_ln1496_5_fu_661_p2;
wire   [0:0] icmp_ln1496_6_fu_676_p2;
wire   [0:0] icmp_ln1496_7_fu_690_p2;
wire   [15:0] select_ln86_6_fu_682_p3;
wire   [15:0] select_ln86_7_fu_696_p3;
wire   [0:0] icmp_ln1496_8_fu_704_p2;
wire   [0:0] icmp_ln1496_9_fu_719_p2;
wire   [0:0] icmp_ln1496_10_fu_733_p2;
wire   [15:0] select_ln86_9_fu_725_p3;
wire   [15:0] select_ln86_10_fu_739_p3;
wire   [0:0] icmp_ln1496_11_fu_747_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_167;
reg    ap_condition_239;
reg    ap_condition_235;
reg    ap_condition_813;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 pX = 32'd0;
#0 sX = 32'd0;
#0 pY = 32'd0;
#0 sY = 32'd0;
#0 kernel_data_V_1_4 = 16'd0;
#0 kernel_data_V_1_5 = 16'd0;
#0 kernel_data_V_1_6 = 16'd0;
#0 kernel_data_V_1_7 = 16'd0;
#0 kernel_data_V_1_12 = 16'd0;
#0 kernel_data_V_1_13 = 16'd0;
#0 kernel_data_V_1_14 = 16'd0;
#0 kernel_data_V_1_15 = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_start_reg = 1'b0;
end

shift_line_buffer_array_ap_fixed_4u_config4_s call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_start),
    .ap_done(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_done),
    .ap_idle(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_idle),
    .ap_ready(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_ready),
    .in_elem_data_0_V_read(tmp_data_0_V_reg_777),
    .in_elem_data_1_V_read(tmp_data_1_V_reg_782),
    .in_elem_data_2_V_read(tmp_data_2_V_reg_787),
    .in_elem_data_3_V_read(tmp_data_3_V_reg_792),
    .kernel_window_4_V_read(kernel_data_V_1_4),
    .kernel_window_5_V_read(kernel_data_V_1_5),
    .kernel_window_6_V_read(kernel_data_V_1_6),
    .kernel_window_7_V_read(kernel_data_V_1_7),
    .kernel_window_12_V_read(kernel_data_V_1_12),
    .kernel_window_13_V_read(kernel_data_V_1_13),
    .kernel_window_14_V_read(kernel_data_V_1_14),
    .kernel_window_15_V_read(kernel_data_V_1_15),
    .ap_return_0(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_0),
    .ap_return_1(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_1),
    .ap_return_2(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_2),
    .ap_return_3(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_3),
    .ap_return_4(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_4),
    .ap_return_5(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_5),
    .ap_return_6(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_6),
    .ap_return_7(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_7),
    .ap_return_8(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_8),
    .ap_return_9(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_9),
    .ap_return_10(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_10),
    .ap_return_11(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_11),
    .ap_return_12(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_12),
    .ap_return_13(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_13),
    .ap_return_14(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_14),
    .ap_return_15(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_15),
    .ap_ce(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln233_reg_768 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_start_reg <= 1'b1;
        end else if ((call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_ready == 1'b1)) begin
            call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_235)) begin
        if ((1'b1 == ap_condition_239)) begin
            ap_phi_reg_pp0_iter2_storemerge_i_i_reg_229 <= 32'd0;
        end else if ((1'b1 == ap_condition_167)) begin
            ap_phi_reg_pp0_iter2_storemerge_i_i_reg_229 <= select_ln213_fu_424_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_storemerge_i_i_reg_229 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_229;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_218 <= add_ln233_fu_270_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_218 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_235)) begin
        if ((icmp_ln203_fu_350_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln203_fu_350_p2 == 1'd0)) begin
            pX <= add_ln216_fu_356_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_813)) begin
        if ((icmp_ln207_fu_400_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln207_fu_400_p2 == 1'd0)) begin
            pY <= add_ln211_fu_406_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_235)) begin
        if ((icmp_ln203_fu_350_p2 == 1'd1)) begin
            sX <= 32'd0;
        end else if ((icmp_ln203_fu_350_p2 == 1'd0)) begin
            sX <= select_ln218_fu_374_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_reg_768 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln185_2_reg_797 <= and_ln185_2_fu_344_p2;
        tmp_data_0_V_reg_777 <= data_V_data_0_V_dout;
        tmp_data_1_V_reg_782 <= data_V_data_1_V_dout;
        tmp_data_2_V_reg_787 <= data_V_data_2_V_dout;
        tmp_data_3_V_reg_792 <= data_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_229 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_229;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln203_reg_801 <= icmp_ln203_fu_350_p2;
        icmp_ln233_reg_768 <= icmp_ln233_fu_264_p2;
        icmp_ln233_reg_768_pp0_iter1_reg <= icmp_ln233_reg_768;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_reg_768_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_data_V_1_12 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_12;
        kernel_data_V_1_13 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_13;
        kernel_data_V_1_14 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_14;
        kernel_data_V_1_15 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_15;
        kernel_data_V_1_4 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_8;
        kernel_data_V_1_5 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_9;
        kernel_data_V_1_6 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_10;
        kernel_data_V_1_7 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_11;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln203_reg_801 == 1'd1))) begin
        sY <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_229;
    end
end

always @ (*) begin
    if ((icmp_ln233_fu_264_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln203_reg_801 == 1'd1))) begin
        ap_sig_allocacmp_sY_load = ap_phi_reg_pp0_iter2_storemerge_i_i_reg_229;
    end else begin
        ap_sig_allocacmp_sY_load = sY;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp68) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_ce = 1'b1;
    end else begin
        call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln233_reg_768 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln233_reg_768 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln233_reg_768 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln233_reg_768 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln233_reg_768 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln233_reg_768 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln233_reg_768 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln233_reg_768 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln185_2_reg_797))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln185_2_reg_797))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln185_2_reg_797))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln185_2_reg_797))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln185_2_reg_797))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln185_2_reg_797))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln185_2_reg_797))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln185_2_reg_797))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln233_fu_264_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln233_fu_264_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln211_fu_406_p2 = (pY + 32'd1);

assign add_ln213_fu_418_p2 = (ap_sig_allocacmp_sY_load + 32'd1);

assign add_ln216_fu_356_p2 = (pX + 32'd1);

assign add_ln218_fu_368_p2 = (sX + 32'd1);

assign add_ln233_fu_270_p2 = (indvar_flatten_reg_218 + 8'd1);

assign and_ln185_1_fu_338_p2 = (icmp_ln185_3_fu_326_p2 & icmp_ln185_2_fu_316_p2);

assign and_ln185_2_fu_344_p2 = (and_ln185_fu_332_p2 & and_ln185_1_fu_338_p2);

assign and_ln185_fu_332_p2 = (icmp_ln185_fu_296_p2 & icmp_ln185_1_fu_306_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln233_reg_768 == 1'd0) & (io_acc_block_signal_op19 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((io_acc_block_signal_op117 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln185_2_reg_797)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln233_reg_768 == 1'd0) & (io_acc_block_signal_op19 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((io_acc_block_signal_op117 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln185_2_reg_797)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp68 = (((icmp_ln233_reg_768 == 1'd0) & (io_acc_block_signal_op19 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((io_acc_block_signal_op117 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln185_2_reg_797)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln233_reg_768 == 1'd0) & (io_acc_block_signal_op19 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((io_acc_block_signal_op117 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln185_2_reg_797)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln233_reg_768 == 1'd0) & (io_acc_block_signal_op19 == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1_ignore_call18 = ((icmp_ln233_reg_768 == 1'd0) & (io_acc_block_signal_op19 == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((io_acc_block_signal_op117 == 1'b0) & (1'd1 == and_ln185_2_reg_797));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2_ignore_call18 = ((io_acc_block_signal_op117 == 1'b0) & (1'd1 == and_ln185_2_reg_797));
end

always @ (*) begin
    ap_condition_167 = ((icmp_ln207_fu_400_p2 == 1'd0) & (icmp_ln233_reg_768 == 1'd0) & (icmp_ln203_fu_350_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_235 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_239 = ((icmp_ln233_reg_768 == 1'd0) & (icmp_ln207_fu_400_p2 == 1'd1) & (icmp_ln203_fu_350_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_813 = ((icmp_ln233_reg_768 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln203_fu_350_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_229 = 'bx;

assign ap_ready = internal_ap_ready;

assign call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_start = call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_start_reg;

assign icmp_ln1496_10_fu_733_p2 = (($signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_7) < $signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_15)) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_747_p2 = (($signed(select_ln86_9_fu_725_p3) < $signed(select_ln86_10_fu_739_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_604_p2 = (($signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_4) < $signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_12)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_618_p2 = (($signed(select_ln86_fu_596_p3) < $signed(select_ln86_1_fu_610_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_633_p2 = (($signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_1) < $signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_9)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_647_p2 = (($signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_5) < $signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_13)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_661_p2 = (($signed(select_ln86_3_fu_639_p3) < $signed(select_ln86_4_fu_653_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_676_p2 = (($signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_2) < $signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_10)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_690_p2 = (($signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_6) < $signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_14)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_704_p2 = (($signed(select_ln86_6_fu_682_p3) < $signed(select_ln86_7_fu_696_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_719_p2 = (($signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_3) < $signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_11)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_590_p2 = (($signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_0) < $signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_8)) ? 1'b1 : 1'b0);

assign icmp_ln185_1_fu_306_p2 = ((ap_sig_allocacmp_sY_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln185_2_fu_316_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln185_3_fu_326_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_296_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_350_p2 = ((pX == 32'd13) ? 1'b1 : 1'b0);

assign icmp_ln207_fu_400_p2 = ((pY == 32'd13) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_264_p2 = ((indvar_flatten_reg_218 == 8'd196) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op117 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op19 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = ((icmp_ln1496_2_fu_618_p2[0:0] === 1'b1) ? select_ln86_1_fu_610_p3 : select_ln86_fu_596_p3);

assign res_V_data_1_V_din = ((icmp_ln1496_5_fu_661_p2[0:0] === 1'b1) ? select_ln86_4_fu_653_p3 : select_ln86_3_fu_639_p3);

assign res_V_data_2_V_din = ((icmp_ln1496_8_fu_704_p2[0:0] === 1'b1) ? select_ln86_7_fu_696_p3 : select_ln86_6_fu_682_p3);

assign res_V_data_3_V_din = ((icmp_ln1496_11_fu_747_p2[0:0] === 1'b1) ? select_ln86_10_fu_739_p3 : select_ln86_9_fu_725_p3);

assign select_ln213_fu_424_p3 = ((icmp_ln185_1_fu_306_p2[0:0] === 1'b1) ? 32'd0 : add_ln213_fu_418_p2);

assign select_ln218_fu_374_p3 = ((icmp_ln185_fu_296_p2[0:0] === 1'b1) ? 32'd0 : add_ln218_fu_368_p2);

assign select_ln86_10_fu_739_p3 = ((icmp_ln1496_10_fu_733_p2[0:0] === 1'b1) ? call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_15 : call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_7);

assign select_ln86_1_fu_610_p3 = ((icmp_ln1496_1_fu_604_p2[0:0] === 1'b1) ? call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_12 : call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_4);

assign select_ln86_3_fu_639_p3 = ((icmp_ln1496_3_fu_633_p2[0:0] === 1'b1) ? call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_9 : call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_1);

assign select_ln86_4_fu_653_p3 = ((icmp_ln1496_4_fu_647_p2[0:0] === 1'b1) ? call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_13 : call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_5);

assign select_ln86_6_fu_682_p3 = ((icmp_ln1496_6_fu_676_p2[0:0] === 1'b1) ? call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_10 : call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_2);

assign select_ln86_7_fu_696_p3 = ((icmp_ln1496_7_fu_690_p2[0:0] === 1'b1) ? call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_14 : call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_6);

assign select_ln86_9_fu_725_p3 = ((icmp_ln1496_9_fu_719_p2[0:0] === 1'b1) ? call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_11 : call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_3);

assign select_ln86_fu_596_p3 = ((icmp_ln1496_fu_590_p2[0:0] === 1'b1) ? call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_8 : call_ret_shift_line_buffer_array_ap_fixed_4u_config4_s_fu_240_ap_return_0);

assign start_out = real_start;

endmodule //pooling2d_cl_array_array_ap_fixed_4u_config4_s
